import * as path from 'path';
import * as fs from 'fs';

/**
 * This generates const TypeScript ABIs for each asset in
 * `@safe-global/safe-deployments` package for `viem` to infer.
 *
 * Although it is possible to get a singleton programmatically and
 * import the JSON directly, neither is strictly typed.
 *
 * Once it is possible to import JSON "as const", the deployments
 * package should be updated to return the singletons as such.
 *
 * @see https://github.com/microsoft/TypeScript/issues/32063
 */

// Path to directory containing JSON assets
const assetsDir = path.join(
  process.cwd(),
  'node_modules',
  '@safe-global',
  'safe-deployments',
  'dist',
  'assets',
);

// Path to directory where ABIs will be written
const outputDir = path.join(process.cwd(), 'src', 'abis', 'safe');

function main() {
  // Remove any existing ABIs
  try {
    fs.rmSync(outputDir, { recursive: true });
  } catch {
    // Swallow error if directory does not exist
  }

  // For each version...
  for (const version of fs.readdirSync(assetsDir)) {
    const versionOutputDir = path.join(outputDir, version);

    fs.mkdirSync(versionOutputDir, { recursive: true });

    const versionDir = path.join(assetsDir, version);

    // ...parse the ABI for each asset
    for (const assetFile of fs.readdirSync(versionDir)) {
      // Read the asset JSON
      const assetPath = path.join(assetsDir, version, assetFile);
      const assetJson = fs.readFileSync(assetPath, 'utf8');

      // Parse the asset JSON
      const { contractName, abi } = JSON.parse(assetJson);

      // Write the ABI to a file
      const fileName = `${contractName}.abi.ts`;
      const filePath = path.join(versionOutputDir, fileName);

      const content = `// This file is auto-generated by scripts/generate-abis.ts
export default ${JSON.stringify(abi, null, 2)} as const;`;
      fs.writeFileSync(filePath, content);
    }
  }

  console.log('ABIs generated successfully!');
}

main();
