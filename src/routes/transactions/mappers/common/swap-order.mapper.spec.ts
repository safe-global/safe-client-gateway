import { IConfigurationService } from '@/config/configuration.service.interface';
import { IChainsRepository } from '@/domain/chains/chains.repository.interface';
import { MultiSendDecoder } from '@/domain/contracts/decoders/multi-send-decoder.helper';
import { GPv2Decoder } from '@/domain/swaps/contracts/decoders/gp-v2-decoder.helper';
import { Order } from '@/domain/swaps/entities/order.entity';
import { ISwapsRepository } from '@/domain/swaps/swaps.repository';
import { tokenBuilder } from '@/domain/tokens/__tests__/token.builder';
import { ITokenRepository } from '@/domain/tokens/token.repository.interface';
import { GPv2OrderHelper } from '@/routes/transactions/helpers/gp-v2-order.helper';
import { SwapOrderHelper } from '@/routes/transactions/helpers/swap-order.helper';
import { SwapOrderMapper } from '@/routes/transactions/mappers/common/swap-order.mapper';
import { faker } from '@faker-js/faker';
import { ILoggingService } from '@/logging/logging.interface';

const loggingService = {
  debug: jest.fn(),
} as jest.MockedObjectDeep<ILoggingService>;
const mockLoggingService = jest.mocked(loggingService);

const mockTokenRepository = {
  getToken: jest.fn(),
} as jest.MockedObjectDeep<ITokenRepository>;

const mockSwapsRepository = {
  getOrder: jest.fn(),
  getFullAppData: jest.fn(),
} as jest.MockedObjectDeep<ISwapsRepository>;

const mockConfigurationService = {
  getOrThrow: jest.fn(),
} as jest.MockedObjectDeep<IConfigurationService>;

const mockChainsRepository = {
  getChain: jest.fn(),
} as jest.MockedObjectDeep<IChainsRepository>;

describe('SwapOrderMapper', () => {
  let target: SwapOrderMapper;
  const restrictApps = false;
  let swapsExplorerBaseUri: string;

  beforeEach(() => {
    jest.resetAllMocks();

    mockConfigurationService.getOrThrow.mockImplementation((key: string) => {
      switch (key) {
        case 'swaps.restrictApps': {
          return restrictApps;
        }
        case 'swaps.explorerBaseUri': {
          swapsExplorerBaseUri = faker.internet.url({ appendSlash: false });
          return swapsExplorerBaseUri;
        }
        default: {
          throw new Error(`Configuration key not found: ${key}`);
        }
      }
    });

    const gpv2Decoder = new GPv2Decoder(mockLoggingService);
    const gpv2OrderHelper = new GPv2OrderHelper();
    const multiSendDecoder = new MultiSendDecoder();
    const allowedApps = new Set<string>();
    const swapOrderHelper = new SwapOrderHelper(
      multiSendDecoder,
      gpv2Decoder,
      mockTokenRepository,
      mockSwapsRepository,
      mockConfigurationService,
      allowedApps,
      mockChainsRepository,
    );
    target = new SwapOrderMapper(gpv2Decoder, gpv2OrderHelper, swapOrderHelper);
  });

  // TODO: Add test - should've been added in first swaps integration
  it.todo('should map a swap order');

  it('should map a TWAP-based swap order', async () => {
    const chainId = '11155111';
    const safeAddress = '0x31eaC7F0141837B266De30f4dc9aF15629Bd5381';
    const data =
      '0x13d79a0b0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000008600000000000000000000000000000000000000000000000000000000000000004000000000000000000000000be72e441bf55620febc26715db68d3494213d8cb000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b14000000000000000000000000be72e441bf55620febc26715db68d3494213d8cb000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b140000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000b8e40feeb23890000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000098b75c35d9dbd0c00000000000000000000000000000000000000000000000b941d039eed310b36000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000031eac7f0141837b266de30f4dc9af15629bd538100000000000000000000000000000000000000000000000b941d039eed310b36000000000000000000000000000000000000000000000000087bbc924df9167e00000000000000000000000000000000000000000000000000000000666b0cb7f7be7261f56698c258bf75f888d68a00c85b22fb21958b9009c719eb88aebda00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000b941d039eed310b36000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000004d831eac7f0141837b266de30f4dc9af15629bd53815fd7e97ddaee378bd0eb30ddf479272accf91761e697bc00e067a268f95f1d2732ed230bd5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e489000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000be72e441bf55620febc26715db68d3494213d8cb000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b1400000000000000000000000031eac7f0141837b266de30f4dc9af15629bd538100000000000000000000000000000000000000000000000b941d039eed310b36000000000000000000000000000000000000000000000000087bbc924df9167e00000000000000000000000000000000000000000000000000000000666b0cb7f7be7261f56698c258bf75f888d68a00c85b22fb21958b9009c719eb88aebda00000000000000000000000000000000000000000000000000000000000000000f3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee34677500000000000000000000000000000000000000000000000000000000000000005a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc95a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc90000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006cf1e9ca41f7611def408122793c358a3d11e5a500000000000000000000000000000000000000000000000000000019011f294a00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000be72e441bf55620febc26715db68d3494213d8cb000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b1400000000000000000000000031eac7f0141837b266de30f4dc9af15629bd538100000000000000000000000000000000000000000000000b941d039eed310b36000000000000000000000000000000000000000000000000087bbc924df9167e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000007080000000000000000000000000000000000000000000000000000000000000000f7be7261f56698c258bf75f888d68a00c85b22fb21958b9009c719eb88aebda00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000086dcd3293c53cf8efd7303b57beb2a3f671dde980000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001048803dbee00000000000000000000000000000000000000000000000009a4243487ef7e8600000000000000000000000000000000000000000000000bb1c124efe034415400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000009008d19f58aabd9ed0d60971565aa8510560ab41ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000be72e441bf55620febc26715db68d3494213d8cb000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b849ec';
    /**
     * @see https://explorer.cow.fi/sepolia/orders/0x557cb31a9dbbd23830c57d9fd3bbfc3694e942c161232b6cf696ba3bd11f9d6631eac7f0141837b266de30f4dc9af15629bd5381666b0cb7?tab=overview
     */
    const order = {
      creationDate: '2024-06-13T14:44:02.307987Z',
      owner: '0x31eac7f0141837b266de30f4dc9af15629bd5381',
      uid: '0x557cb31a9dbbd23830c57d9fd3bbfc3694e942c161232b6cf696ba3bd11f9d6631eac7f0141837b266de30f4dc9af15629bd5381666b0cb7',
      availableBalance: null,
      executedBuyAmount: '687772850053823756',
      executedSellAmount: '213586875483862141750',
      executedSellAmountBeforeFees: '213586875483862141750',
      executedFeeAmount: '0',
      executedSurplusFee: '2135868754838621123',
      invalidated: false,
      status: 'fulfilled',
      class: 'limit',
      settlementContract: '0x9008d19f58aabd9ed0d60971565aa8510560ab41',
      fullFeeAmount: '0',
      solverFee: '0',
      isLiquidityOrder: false,
      fullAppData:
        '{"appCode":"Safe Wallet Swaps","metadata":{"orderClass":{"orderClass":"twap"},"quote":{"slippageBips":1000},"widget":{"appCode":"CoW Swap-SafeApp","environment":"production"}},"version":"1.1.0"}',
      sellToken: '0xbe72e441bf55620febc26715db68d3494213d8cb',
      buyToken: '0xfff9976782d46cc05630d1f6ebab18b2324d6b14',
      receiver: '0x31eac7f0141837b266de30f4dc9af15629bd5381',
      sellAmount: '213586875483862141750',
      buyAmount: '611289510998251134',
      validTo: 1718291639,
      appData:
        '0xf7be7261f56698c258bf75f888d68a00c85b22fb21958b9009c719eb88aebda0',
      feeAmount: '0',
      kind: 'sell',
      partiallyFillable: false,
      sellTokenBalance: 'erc20',
      buyTokenBalance: 'erc20',
      signingScheme: 'eip1271',
      signature:
        '0x5fd7e97ddaee378bd0eb30ddf479272accf91761e697bc00e067a268f95f1d2732ed230bd5a25ba2e97094ad7d83dc28a6572da797d6b3e7fc6663bd93efb789fc17e489000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000be72e441bf55620febc26715db68d3494213d8cb000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b1400000000000000000000000031eac7f0141837b266de30f4dc9af15629bd538100000000000000000000000000000000000000000000000b941d039eed310b36000000000000000000000000000000000000000000000000087bbc924df9167e00000000000000000000000000000000000000000000000000000000666b0cb7f7be7261f56698c258bf75f888d68a00c85b22fb21958b9009c719eb88aebda00000000000000000000000000000000000000000000000000000000000000000f3b277728b3fee749481eb3e0b3b48980dbbab78658fc419025cb16eee34677500000000000000000000000000000000000000000000000000000000000000005a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc95a28e9363bb942b639270062aa6bb295f434bcdfc42c97267bf003f272060dc90000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006cf1e9ca41f7611def408122793c358a3d11e5a500000000000000000000000000000000000000000000000000000019011f294a00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000be72e441bf55620febc26715db68d3494213d8cb000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b1400000000000000000000000031eac7f0141837b266de30f4dc9af15629bd538100000000000000000000000000000000000000000000000b941d039eed310b36000000000000000000000000000000000000000000000000087bbc924df9167e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000007080000000000000000000000000000000000000000000000000000000000000000f7be7261f56698c258bf75f888d68a00c85b22fb21958b9009c719eb88aebda00000000000000000000000000000000000000000000000000000000000000000',
      interactions: { pre: [], post: [] },
    } as unknown as Order;

    const buyToken = tokenBuilder().with('address', order.buyToken).build();
    const sellToken = tokenBuilder().with('address', order.sellToken).build();

    mockSwapsRepository.getOrder.mockResolvedValueOnce(order);
    mockTokenRepository.getToken.mockImplementation(async ({ address }) => {
      switch (address) {
        case order.buyToken: {
          return Promise.resolve(buyToken);
        }
        case order.sellToken: {
          return Promise.resolve(sellToken);
        }
        default: {
          return Promise.reject(new Error(`Token not found: ${address}`));
        }
      }
    });

    const result = await target.mapTwapSwapOrder(chainId, safeAddress, {
      data,
    });

    expect(result).toEqual({
      buyAmount: '611289510998251134',
      buyToken: {
        address: buyToken.address,
        decimals: buyToken.decimals,
        logoUri: buyToken.logoUri,
        name: buyToken.name,
        symbol: buyToken.symbol,
        trusted: buyToken.trusted,
      },
      executedBuyAmount: '687772850053823756',
      executedSellAmount: '213586875483862141750',
      executedSurplusFee: '2135868754838621123',
      explorerUrl: `${swapsExplorerBaseUri}/orders/0x557cb31a9dbbd23830c57d9fd3bbfc3694e942c161232b6cf696ba3bd11f9d6631eac7f0141837b266de30f4dc9af15629bd5381666b0cb7`,
      fullAppData:
        '{"appCode":"Safe Wallet Swaps","metadata":{"orderClass":{"orderClass":"twap"},"quote":{"slippageBips":1000},"widget":{"appCode":"CoW Swap-SafeApp","environment":"production"}},"version":"1.1.0"}',
      humanDescription: null,
      kind: 'sell',
      orderClass: 'limit',
      owner: '0x31eac7f0141837b266de30f4dc9af15629bd5381',
      receiver: '0x31eac7f0141837b266de30f4dc9af15629bd5381',
      richDecodedInfo: null,
      sellAmount: '213586875483862141750',
      sellToken: {
        address: sellToken.address,
        decimals: sellToken.decimals,
        logoUri: sellToken.logoUri,
        name: sellToken.name,
        symbol: sellToken.symbol,
        trusted: sellToken.trusted,
      },
      status: 'fulfilled',
      type: 'SwapOrder',
      uid: '0x557cb31a9dbbd23830c57d9fd3bbfc3694e942c161232b6cf696ba3bd11f9d6631eac7f0141837b266de30f4dc9af15629bd5381666b0cb7',
      validUntil: 1718291639,
    });
  });
});
